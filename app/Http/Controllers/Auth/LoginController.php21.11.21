<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Hash;

class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = RouteServiceProvider::HOME;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    protected function redirectTo()
    {
        if(Auth()->user()->role_id == 1){
            $this->redirectTo = '/admin/dashboard';
        } else if(Auth()->user()->role_id == 3){
            $this->redirectTo = '/admin/dashboard';
        } else if(Auth()->user()->role_id == 4){
            $this->redirectTo = route('profile');
        } else {
            Auth::logout();
            $this->redirectTo = '/login';
        }
        return $this->redirectTo;

    }
    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }
	public function login(Request $request)
    {
		$messages = [
            'email.required' => 'The Email is required.',
            'password.required' => 'The Password is required.',
        ];
		$validator = Validator::make($request->all(), [
            'email' => 'required',
            'password' => 'required',
        ],$messages);
		
		$msgg = '';
        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }
		$login_try = Auth::attempt(['email' => $request->email, 'password' => $request->password, 'status'=>'Y']);
		if ($login_try) {
            switch(Auth::user()->role_id){
				case 1:
				    return redirect()->route('dashboard');
                    break;
				case 3:
				    return redirect()->route('dashboard');
					break;
				case 4:
                    return redirect()->route('profile');
					break;
				default:
					return back();
			}			
		} else {
			return back()->with(["error" => "Invalid credentials or you can not access your profile. Please contact your administrator."]);
		}
	}
}
